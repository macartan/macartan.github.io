n <- 500
X <- expand_grid(x = seq(-2,1, length = n), d = seq(-1.1,1,length = n)) %>% filter(d < sin((x+2)*8))
F <- function(x) mean(X$x <= x)
# 1-F(0)
sigs = c(.05, .1, .16, .18, .3, .95)
df_br <-
expand_grid(m = seq(0, 1, .001), sig = sigs, ra = .4, rd = c(.2)) %>%
mutate(
x = (-m*ra +(1-m)*rd)*(1-sig)/sig,
m2 = 1 - sapply(x, F),
m2 = ifelse(m2<0, 0,m2),
m2 = ifelse(m2>1, 1,m2),
sigma = factor(sig))
df_br$sig2 <- factor(df_br$sig, sigs, TeX(paste0("$sigma=", sigs, "$")))
many_equilibria <-
df_br |>
ggplot(aes(m, m2)) + geom_line() + ylim(0:1) +
xlab("m: this many are attacking") + ylab(TeX("$mu$: this many will attack"))+ xlim(0:1) +
geom_abline(aes(intercept = 0, slope = 1), color = "black") + theme_bw() +
facet_grid(~sig2, labeller = "label_parsed")
many_equilibria
pdf("graphs_files/many.pdf", width = 12, height = 2.5)
many_equilibria
dev.off()
sigtop = .3
if(FALSE)
expand_grid(m = seq(0, 1, .01), sig = seq(.01, sigtop, .05), ra = .4, rd = .2) %>%
mutate(
x = (-m*ra +(1-m)*rd)*(1-sig)/sig,
m2 = 1 - sapply(x, F),
m2 = ifelse(m2<0, 0, m2),
m2 = ifelse(m2>1, 1, m2)) %>%
group_by(ra, rd, sig) %>%
mutate(
stable =   (sign(m-m2) > sign(lag(m)-lag(m2))) & (lag(m2)!=0),
unstable = sign(m-m2) < sign(lag(m)-lag(m2)),
pure = (m == 0 & m2 <= 0) | (m == 1 & m2 >= 1)) %>%
filter(stable | unstable | pure) %>% ungroup %>%
mutate(equilibrium =
ifelse(unstable, "unstable", "stable"),
equilibrium =  ifelse(pure, "stable", equilibrium)) %>%
write_rds("df.rds")
df_polygon <- data.frame(sig = c(0, sigtop, sigtop, 0), m = c(1/3, 1/3, 1-F(0), 1-F(0)), equilibrium = NA)
read_rds("df.rds") %>%
ggplot(aes(sig, m, color = equilibrium)) +  geom_point() +
ylab("Share attacking") + xlab("sigma") + theme_bw() + theme(legend.position = "none") +
geom_polygon(data = df_polygon, fill  = "lightgrey", color = "white", alpha = .5) + geom_point()
expand_grid(m = seq(0, 1, .01), sig = c(.2, .4, .6), ra = .5, rd = c(0, .1, .2)) %>%
data.frame() %>%
mutate(
m2 = 1 - (2/3)*((-m*ra +(1-m)*rd)/sig+1),
m2 = ifelse(m2<0, 0,m2),
m2 = ifelse(m2>1, 1,m2)
) %>%
ggplot(aes(m, m2)) + geom_line() +
facet_grid(sig~rd, labeller = label_both) + ylim(0:1) + xlab("m: this many are") + ylab("mu: this many will")+ xlim(0:1) + geom_abline(aes(intercept = 0, slope = 1), color = "#F8766D") + theme_bw()
ras <- c(.2, .41, .8, 1.62)
rds <- c(.2, .41, .8, 1.62)
df <- expand_grid(m = seq(0, 1, .001), sig = seq(.1, 1, .0005),
ra = ras, rd = rds) %>%
data.frame() %>%
mutate(
m2 = 1 - (2/3)*((-m*ra +(1-m)*rd)*(1-sig)/sig+1),
m2 = ifelse(m2<0, 0,m2),
m2 = ifelse(m2>1, 1,m2)
)
df_eq <- df %>%
group_by(ra, rd, sig) %>%
mutate(
stable =   (sign(m-m2) > sign(lag(m)-lag(m2))) & (lag(m2)!=0),
unstable = sign(m-m2) < sign(lag(m)-lag(m2)),
pure = (m == 0 & m2 <= 0) | (m == 1 & m2 >= 1)) %>%
filter(stable | unstable | pure) %>% ungroup %>%
mutate(equilibrium =
ifelse(unstable, "unstable", "stable"),
equilibrium =  ifelse(pure, "stable", equilibrium)
)
dfp <- expand_grid(ra = ras, rd = rds)
df_polygon <- bind_rows(
mutate(dfp, sig = 0, m = rd/(ra+rd)),
mutate(dfp, sig = 1, m = rd/(ra+rd)),
mutate(dfp, sig = 1, m = 1/3),
mutate(dfp, sig = 0, m = 1/3)
) %>% mutate(equilibrium = NA)
df_eq$ra2 <- factor(df_eq$ra, ras, TeX(paste0("$\\rho_A=",ras, "$")))
df_eq$rd2 <- factor(df_eq$rd, rds, TeX(paste0("$\\rho_D=",rds, "$")))
mean_df <- df_eq %>%
group_by(rd2, ra2) %>%
summarise(threshold = (2*ra + 2*rd)/( 3+ 2*ra + 2*rd))
main_plot <-
df_eq %>%
ggplot(aes(sig, m, color = equilibrium)) +
facet_grid(rd2 ~ra2, labeller = "label_parsed")  +
ylab("Share attacking") +
xlab( TeX("$sigma$")) +
theme_bw() + theme(legend.position = "none") +
geom_polygon(data = df_polygon, fill  = "lightgrey", color = "white", alpha = .5) +
geom_point() +
geom_vline(data = mean_df, aes(xintercept = threshold), colour = "darkgrey")
main_plot
pdf("graphs_files/main.pdf", width = 10, height = 5)
main_plot
dev.off()
x = seq(-1, 1, .05)
plot(x, dbeta((x+1)/2, 4, 6), xlab = "Pro autocracy", ylab = "density", type = "l")
sigs = c(.2, .4, .6)
rds <- c(.1, .3, .5)
df_br <-
expand_grid(m = seq(0, 1, .01), sig = sigs, ra = .4, rd = rds) %>%
data.frame() %>%
mutate(
m2 = 1 - pbeta(((-m^2*ra + (1-m^2)*rd)/sig + 1)/2, 4, 6),
m2 = ifelse(m2<0, 0,m2),
m2 = ifelse(m2>1, 1,m2)
)
df_br$sig2 <- factor(df_br$sig, sigs, TeX(paste0("$sigma=", sigs, "$")))
df_br$rd2 <- factor(df_br$rd, rds, TeX(paste0("$\\rho_D=",rds, "$")))
df_br |>
ggplot(aes(m, m2)) + geom_line() +
facet_grid(sig2~rd2, labeller = "label_parsed") +
ylim(0:1) + xlab("m: this many are attacking") +
ylab( TeX("$mu$: This many will attack")) +
xlim(0:1) + geom_abline(aes(intercept = 0, slope = 1), color = "#F8766D") + theme_bw()
df <- expand_grid(m = seq(0, 1, .002),
sig = seq(.1, 2, .001),
ra = c(0, .2, .6, 1.2),
rd = c(0, .2, .41, .8)) %>%
data.frame() %>%
mutate(
m2 = 1 - pbeta(((-m^2*ra + (1-m^2)*rd)*(1-sig)/sig + 1)/2, 4, 6),
m2 = ifelse(m2<0, 0,m2),
m2 = ifelse(m2>1, 1,m2)
)
df_eq <- df %>%
group_by(ra, rd, sig) %>%
mutate(
stable =   (sign(m-m2) > sign(lag(m)-lag(m2))) & (lag(m2)!=0),
unstable = sign(m-m2) < sign(lag(m)-lag(m2)),
pure = (m == 0 & m2 <= 0) | (m == 1 & m2 >= 1)) %>%
filter(stable | unstable | pure) %>% ungroup %>%
mutate(equilibrium =
ifelse(unstable, "unstable", "stable"),
equilibrium =  ifelse(pure, "stable", equilibrium)
)
df_eq %>% ggplot(aes(sig, m, color = equilibrium)) + facet_grid(rd ~ra, labeller = "label_both") + geom_point() + ylab("Share attacking") + xlab("sigma") + theme_bw() + theme(legend.position = "none")
rds <- ras <- c(.2, 1, 5.5, 25)
df <- expand_grid(m = seq(0, 1, .001), sig = seq(.1, 1, .0002),
ra = ras, rd = rds) %>%
data.frame() %>%
mutate(
m2 = 1 - pbeta(((-m^1.5*ra + (1-m^1.5)*rd)*(1-sig)/sig + 1)/2, 5.53, 7)
)
? draw
dfp
df_polygon
main_plot <-
df_eq %>%
ggplot(aes(sig, m, color = equilibrium)) +
facet_grid(rd2 ~ra2, labeller = "label_parsed")  +
ylab("Share attacking") +
xlab( TeX("$sigma$")) +
theme_bw() + theme(legend.position = "none") +
geom_polygon(data = df_polygon, fill  = "lightgrey", color = "white", alpha = .5) +
geom_point() +
geom_vline(data = mean_df, aes(xintercept = threshold), colour = "darkgrey")
main_plot
main_plot
4.7*3.6
19 * 160
300*12
(11/14)^2
7*(11/14)^2
7*(11/14)
1-(2/7)^.5
.55^2*7
.535^2*7
1-(3/7)^.5
.35^2*700
(1-.35)^2*700
.35^2
19/4/5
19*4/5
12690*2*.8
12690*2*.2
cjcheck <- system.file(package = "cjEuclid")
cjcheck
? nzchar
cjcheck <- system.file(package = "cjEuclid") |> nzchar()
cjcheck
# Helper to write matrices
write_matrices <- function (mat, filename){
array_to_LaTeX <- function(arr){
rows <- apply(arr, MARGIN=1, paste, collapse = " & ")
matrix_string <- paste(rows, collapse = " \\\\ ")
return(paste("\\begin{bmatrix}", matrix_string, "\\end{bmatrix}"))
}
fileConn <- file(filename)
writeLines(array_to_LaTeX(mat), fileConn)
close(fileConn)
}
## Packages
if (!require(pacman)) install.packages("pacman")
pacman::p_load(
lfe,        #
gridExtra,
modelsummary,
ggpubr,      # arrange multiple plots
gtrendsR,    # google trends
curl,
broom.helpers,# tidy regression
estimatr,
dplyr,       # Data manipulation
fBasics,     # Summary statistics
ggplot2,
kableExtra,  # Prettier RMarkdown (1.0.1)
knitr,
labelled,
texreg,
tidyverse,
tidycat     # tidy with categorical variables
)      # Modern alternative to data frames (2.1.1)
knitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE, comment=NA)
options(qwraps2_markup = "markdown")
#sessionInfo()
options(modelsummary_format_numeric_latex = "mathmode")
# Set seed for reproducibility
set.seed(201911)
cjcheck <- system.file(package = "cjEuclid") |> nzchar()
cjcheck
# remotes::install_github("macartan/cjEuclid",force = TRUE)
cjcheck <- system.file(package = "cjEuclid") |> nzchar()
if(cjcheck) library(cjEuclid)
if(!cjcheck) source("1_input/functions/functions.R")
300*18.42
knitr::opts_chunk$set(echo = TRUE)
library(DeclareDesign)
library(Rinteract)
library(tidyverse)
library(ggh4x)
# library(margins)
# library(ggeffects)
# library(effects)
df <- fabricate(100,
X1 = complete_ra(N),
X2 = complete_ra(N),
X3 = complete_ra(N),
X4 = complete_ra(N),
Y = X1 + X3 + X1*X2*X3*X4 + rnorm(N))
# Conditional means
conditional_means <- function(df, Y, ...){
X <- list(...)
# Get set of conditions
calls <- lapply(X, function(x) c(0:1, "All"))
calls <- do.call(expand.grid, calls)
names(calls) <- X
# Generate logical statements
eqs <- lapply(X, function(x) c(paste(x, "==", 0:1), TRUE))
eqs <- do.call(expand.grid, eqs) |>
apply(1, function(r) paste(r, collapse = " & "))
eqs
# Calculate means
stats <-
lapply(eqs, function(eq) {
text <-
paste0("df |> filter(", eq, ") |> summarize(estimate = mean(", Y, "), std.error = sd(", Y, "/(n()^.5)))")
eval(parse(text = text))
}) |> bind_rows()
# Combine
bind_cols(calls, stats)
}
model <- lm(Y ~ X1 * X2 * X3 * X4, data = df)
main_vars = c("X1", "X2", "X3", "X4")
data = df
cond_tab <- int_conditions(model, main_vars = main_vars, data = data)
for(x in main_vars) cond_tab <- cond_tab |> clean(x)
clean <- function(df, X) {
text =
paste0("mutate(df, ", X, "= case_when(grepl('", X, "', effect) ~ 'effect',", X, "== 'mean' ~ 'All', TRUE ~", X, ")")
eval(parse(text = text))
}
for(x in main_vars) cond_tab <- cond_tab |> clean(x)
df <- cond_tab
X = "X1"
text =
paste0("mutate(df, ", X, "= case_when(grepl('", X, "', effect) ~ 'effect',", X, "== 'mean' ~ 'All', TRUE ~", X, ")")
text
text =
paste0("mutate(df, ", X, "= case_when(grepl('", X, "', effect) ~ 'effect',", X, "== 'mean' ~ 'All', TRUE ~", X, "))")
eval(parse(text = text))
clean <- function(df, X) {
text =
paste0("mutate(df, ", X, "= case_when(grepl('", X, "', effect) ~ 'effect',", X, "== 'mean' ~ 'All', TRUE ~", X, "))")
eval(parse(text = text))
}
for(x in main_vars) cond_tab <- cond_tab |> clean(x)
cond_tab |> head()
cond_tab |> select(main_vars, estimate, std.error)
cond_tab |> select(any_of(main_vars), estimate, std.error)
conditional_means <- function(df, Y, main_vars){
# Get set of conditions
calls <- lapply(main_vars, function(x) c(0:1, "All"))
calls <- do.call(expand.grid, calls)
names(calls) <- main_vars
# Generate logical statements
eqs <- lapply(main_vars, function(x) c(paste(x, "==", 0:1), TRUE))
eqs <- do.call(expand.grid, eqs) |>
apply(1, function(r) paste(r, collapse = " & "))
eqs
# Calculate means
stats <-
lapply(eqs, function(eq) {
text <-
paste0("df |> filter(", eq, ") |> summarize(estimate = mean(", Y, "), std.error = sd(", Y, "/(n()^.5)))")
eval(parse(text = text))
}) |> bind_rows()
# Combine
bind_cols(calls, stats)
}
int_conditions_wrapper(model, main_vars, df, "Y")
# Fit a regression model with interactions
# Above can be automated with something like this:
clean <- function(df, X) {
text =
paste0("mutate(df, ", X, "= case_when(grepl('", X, "', effect) ~ 'effect',", X, "== 'mean' ~ 'All', TRUE ~", X, "))")
eval(parse(text = text))
}
int_conditions_wrapper <- function(model, main_vars, data, Y) {
cond_tab <- int_conditions(model, main_vars = main_vars, data = data)
for(x in main_vars) cond_tab <- cond_tab |> clean(x)
cond_tab |> select(any_of(main_vars), estimate, std.error)
bind_rows(cond_tab, conditional_means(df, Y, main_vars))
}
# df %>% mutate(across(any_of(c("X1", "X2")), cleaning_function))
model <- lm(Y ~ X1 * X2 * X3 * X4, data = df)
df <- fabricate(100,
X1 = complete_ra(N),
X2 = complete_ra(N),
X3 = complete_ra(N),
X4 = complete_ra(N),
Y = X1 + X3 + X1*X2*X3*X4 + rnorm(N))
# Conditional means
conditional_means <- function(df, Y, main_vars){
# Get set of conditions
calls <- lapply(main_vars, function(x) c(0:1, "All"))
calls <- do.call(expand.grid, calls)
names(calls) <- main_vars
# Generate logical statements
eqs <- lapply(main_vars, function(x) c(paste(x, "==", 0:1), TRUE))
eqs <- do.call(expand.grid, eqs) |>
apply(1, function(r) paste(r, collapse = " & "))
eqs
# Calculate means
stats <-
lapply(eqs, function(eq) {
text <-
paste0("df |> filter(", eq, ") |> summarize(estimate = mean(", Y, "), std.error = sd(", Y, "/(n()^.5)))")
eval(parse(text = text))
}) |> bind_rows()
# Combine
bind_cols(calls, stats)
}
# Fit a regression model with interactions
# Above can be automated with something like this:
clean <- function(df, X) {
text =
paste0("mutate(df, ", X, "= case_when(grepl('", X, "', effect) ~ 'effect',", X, "== 'mean' ~ 'All', TRUE ~", X, "))")
eval(parse(text = text))
}
int_conditions_wrapper <- function(model, main_vars, data, Y) {
cond_tab <- int_conditions(model, main_vars = main_vars, data = data)
for(x in main_vars) cond_tab <- cond_tab |> clean(x)
cond_tab |> select(any_of(main_vars), estimate, std.error)
bind_rows(cond_tab, conditional_means(df, Y, main_vars))
}
# df %>% mutate(across(any_of(c("X1", "X2")), cleaning_function))
model <- lm(Y ~ X1 * X2 * X3 * X4, data = df)
main_vars = c("X1", "X2", "X3", "X4")
int_conditions_wrapper(model, main_vars, df, "Y")
summ <- int_conditions_wrapper(model, main_vars, df, "Y")
View(summ)
model <- lm(Y ~ X1 * X2 * X3 * X4, data = df)
main_vars = c("X1", "X2", "X3", "X4")
daat
df
data <- df
Y = "Y"
model <- lm(Y ~ X1 * X2 * X3 * X4, data = df)
main_vars = c("X1", "X2")
df <-
int_conditions_wrapper(model, main_vars, df, "Y")  |>
mutate(label = paste0(round(estimate, 2), "\n(", round(std.error, 2), ")"),
x = 1, y = 1) |>
# The next line has some silly syntax
mutate(value = +(if_any(!ends_with("Z"),  ~. == "effect")),
value = ifelse(value == 1, "Causal effect", "Level"))
df
df |>
ggplot(aes(x, y, label = label, color = value)) +
facet_nested(X1  ~ X2, labeller = label_both, switch="y") +
geom_text() +  theme_void() + theme(legend.position = "none")
model <- lm(Y ~ X1 * X2 * X3 * X4, data = df)
model
x <- 1:10
pi = 1/(1 + e^{-x})
x <- 1:10
pi = 1/(1 + exp(-x))
pi
x <- rnorm(100)
pi = 1/(1 + exp(-x))
R = runif(100) < pi
R
x <- rnorm(100)
pi = 1/(1 + exp(-x))
R = 1*(runif(100) < pi)
pi
R
x <- rnorm(1000)
pi = 1/(1 + exp(-x))
R = 1*(runif(100) < pi)
R
DBW <- function(b)
r*(1+exp(-*b*x)) + log(1/(1+exp(-*b*x))
DBW <- function(b)
sum(r*(1+exp(-*b*x)) + log(1/(1+exp(-*b*x)))
DBW <- function(b)
sum(r*(1+exp(-b*x)) + log(1/(1+exp(-b*x)))
DBW(seq(-2,2,.2))
seq(-2,2,.2)
DBW(seq(-2,2,.2))
DBW <- function(b)
sum(r*(1+exp(-b*x)) + log(1/(1+exp(-b*x)))
DBW(seq(-2,2,.2))
DBW <- function(b)
sum(r*(1+exp(-b*x)) + log(1/(1+exp(-b*x)))
DBW(1)
DBW <- function(b)
sum(R*(1+exp(-b*x)) + log(1/(1+exp(-b*x)))
DBW(1)
b = 1
R*(1 + exp(-b*x))
log(1/(1+exp(-b*x))
DBW <- function(b)
sum(R*(1 + exp(-b*x)) + log(1/(1+exp(-b*x))))
DBW(1)
DBW(seq(-2,2,.2))
sapply(seq(-2,2,.2), DBW)
bs <- seq(-2,2,.2)
plot(bs, sapply(bs, DBW))
DBW(1)
bs <- seq(-2,2,.1)
plot(bs, sapply(bs, DBW), type = "l")
bs <- seq(-3,3,.1)
plot(bs, sapply(bs, DBW), type = "l")
sapply(bs, DBW)
which(sapply(bs, DBW))
which.min(sapply(bs, DBW))
bs[which.min(sapply(bs, DBW))]
glm(R ~ X, family = 'binomial')
glm(R ~ x, family = 'binomial')
3.78 +
2.70 +
3.78+
1.00+
2.89
14.15 * 1.15
14.15 * 1.15 / .36
1.5 x 3.6 + 0.8 x 0.12
1.5 * 3.6 + 0.8 * 0.12
1.8 * 2.4 + .6 *.12
1.5 * 1.8
5.5 +
0.1 +
2.7 +
2.7 +
4.4
15.4 * 1.15
71*.36
45*.36
1.8 * 2.15
1.8 * 1.52
5.5 +
0.1 +
2.7 +
2.7 +
4.4
3.9 + 3.9 + 2.7 + 1 + 2.9
14.4 * 1.15
14.4 * 1.15/.36
1.8 x 0.675
1.8 * 0.675
14.6 * 1.2
14.6 * 1.15
2.89 * 1.15
2.89 * 1.2
3.9 + 3.9 + 2.7 + 1.2
11.7 * 1.15
5.5 * 1.2
6.6/.36
5.5 * 1.15
5.5 * 1.15/.36
5.5 * 1.15
2.7 + 2.7 + 4.4 + 0.1 =
2.7 + 2.7 + 4.4 + 0.1
9.9 * 1.15
1.2 * .3 * 7
1.2 * .6 * 7
1.2 * .6 * 8
library(CausalQueries)
model_id_pt <- make_model("I -> M -> D <- P; I -> D") |>
set_restrictions(c(
"(M[I=1] < M[I=0])",
"(D[I=1] > D[I=0]) | (D[M=1] < D[M=0]) | (D[P=1] < D[P=0])"))
